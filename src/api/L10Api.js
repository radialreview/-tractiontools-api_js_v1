/**
 * Traction Tools API - V1
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.6-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateHeadline', 'model/CreateIssue_', 'model/CreateMeeting', 'model/CreateRock', 'model/CreateTodo', 'model/CreatedMeeting', 'model/Headline', 'model/Issue', 'model/Measurable', 'model/Meeting', 'model/NameId', 'model/Rock', 'model/Title', 'model/Todo', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateHeadline'), require('../model/CreateIssue_'), require('../model/CreateMeeting'), require('../model/CreateRock'), require('../model/CreateTodo'), require('../model/CreatedMeeting'), require('../model/Headline'), require('../model/Issue'), require('../model/Measurable'), require('../model/Meeting'), require('../model/NameId'), require('../model/Rock'), require('../model/Title'), require('../model/Todo'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.TractionToolsApiV1) {
      root.TractionToolsApiV1 = {};
    }
    root.TractionToolsApiV1.L10Api = factory(root.TractionToolsApiV1.ApiClient, root.TractionToolsApiV1.CreateHeadline, root.TractionToolsApiV1.CreateIssue_, root.TractionToolsApiV1.CreateMeeting, root.TractionToolsApiV1.CreateRock, root.TractionToolsApiV1.CreateTodo, root.TractionToolsApiV1.CreatedMeeting, root.TractionToolsApiV1.Headline, root.TractionToolsApiV1.Issue, root.TractionToolsApiV1.Measurable, root.TractionToolsApiV1.Meeting, root.TractionToolsApiV1.NameId, root.TractionToolsApiV1.Rock, root.TractionToolsApiV1.Title, root.TractionToolsApiV1.Todo, root.TractionToolsApiV1.User);
  }
}(this, function(ApiClient, CreateHeadline, CreateIssue_, CreateMeeting, CreateRock, CreateTodo, CreatedMeeting, Headline, Issue, Measurable, Meeting, NameId, Rock, Title, Todo, User) {
  'use strict';

  /**
   * L10 service.
   * @module api/L10Api
   * @version v1
   */

  /**
   * Constructs a new L10Api. 
   * @alias module:api/L10Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the l10AddAttendee operation.
     * @callback module:api/L10Api~l10AddAttendeeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an existing user to a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} USER_ID User ID
     * @param {module:api/L10Api~l10AddAttendeeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10AddAttendee = function(MEETING_ID, USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10AddAttendee");
      }

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10AddAttendee");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/attendees/{USER_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10AttachMeasurableL10 operation.
     * @callback module:api/L10Api~l10AttachMeasurableL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an existing scorecard measurable to a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} MEASURABLE_ID Scorecard measurable ID
     * @param {module:api/L10Api~l10AttachMeasurableL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10AttachMeasurableL10 = function(MEETING_ID, MEASURABLE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10AttachMeasurableL10");
      }

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling l10AttachMeasurableL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'MEASURABLE_ID': MEASURABLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/measurables/{MEASURABLE_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10AttachRockMeetingL10 operation.
     * @callback module:api/L10Api~l10AttachRockMeetingL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an existing rock to a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} ROCK_ID Rock ID
     * @param {module:api/L10Api~l10AttachRockMeetingL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10AttachRockMeetingL10 = function(MEETING_ID, ROCK_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10AttachRockMeetingL10");
      }

      // verify the required parameter 'ROCK_ID' is set
      if (ROCK_ID === undefined || ROCK_ID === null) {
        throw new Error("Missing the required parameter 'ROCK_ID' when calling l10AttachRockMeetingL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'ROCK_ID': ROCK_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/rocks/{ROCK_ID}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10CreateHeadlineL10 operation.
     * @callback module:api/L10Api~l10CreateHeadlineL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Headline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a people headline for a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:model/CreateHeadline} body 
     * @param {module:api/L10Api~l10CreateHeadlineL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Headline}
     */
    this.l10CreateHeadlineL10 = function(MEETING_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10CreateHeadlineL10");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10CreateHeadlineL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Headline;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/headlines', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10CreateIssueL10 operation.
     * @callback module:api/L10Api~l10CreateIssueL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an issue to a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:model/CreateIssue_} body 
     * @param {module:api/L10Api~l10CreateIssueL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    this.l10CreateIssueL10 = function(MEETING_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10CreateIssueL10");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10CreateIssueL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Issue;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/issues', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10CreateL10 operation.
     * @callback module:api/L10Api~l10CreateL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedMeeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Level 10 meeting.
     * @param {module:model/CreateMeeting} body 
     * @param {module:api/L10Api~l10CreateL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedMeeting}
     */
    this.l10CreateL10 = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10CreateL10");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = CreatedMeeting;

      return this.apiClient.callApi(
        '/api/v1/L10/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10CreateRockL10 operation.
     * @callback module:api/L10Api~l10CreateRockL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Rock} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new rock and move it to L10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:model/CreateRock} body 
     * @param {module:api/L10Api~l10CreateRockL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Rock}
     */
    this.l10CreateRockL10 = function(MEETING_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10CreateRockL10");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10CreateRockL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Rock;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/rocks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10CreateTodoL10 operation.
     * @callback module:api/L10Api~l10CreateTodoL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a to-do to a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:model/CreateTodo} body 
     * @param {module:api/L10Api~l10CreateTodoL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    this.l10CreateTodoL10 = function(MEETING_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10CreateTodoL10");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10CreateTodoL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = Todo;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/todos', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10EditL10 operation.
     * @callback module:api/L10Api~l10EditL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:model/Title} body 
     * @param {module:api/L10Api~l10EditL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10EditL10 = function(MEETING_ID, body, callback) {
      var postBody = body;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10EditL10");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling l10EditL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetL10 operation.
     * @callback module:api/L10Api~l10GetL10Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Meeting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:api/L10Api~l10GetL10Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Meeting}
     */
    this.l10GetL10 = function(MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = Meeting;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetL10Attendees operation.
     * @callback module:api/L10Api~l10GetL10AttendeesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of attendees
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:api/L10Api~l10GetL10AttendeesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.l10GetL10Attendees = function(MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetL10Attendees");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/attendees', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetL10List operation.
     * @callback module:api/L10Api~l10GetL10ListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameId>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Level 10 meetings
     * @param {module:api/L10Api~l10GetL10ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameId>}
     */
    this.l10GetL10List = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [NameId];

      return this.apiClient.callApi(
        '/api/v1/L10/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetL10Rocks operation.
     * @callback module:api/L10Api~l10GetL10RocksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rock>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of L10 rocks
     * @param {Number} MEETING_ID Meeting ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.INCLUDE_ARCHIVE Include Archive  (Default: false)
     * @param {module:api/L10Api~l10GetL10RocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rock>}
     */
    this.l10GetL10Rocks = function(MEETING_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetL10Rocks");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
        'INCLUDE_ARCHIVE': opts['INCLUDE_ARCHIVE'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Rock];

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/rocks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetRecurrenceHeadlines operation.
     * @callback module:api/L10Api~l10GetRecurrenceHeadlinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Headline>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of people headlines in a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:api/L10Api~l10GetRecurrenceHeadlinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Headline>}
     */
    this.l10GetRecurrenceHeadlines = function(MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetRecurrenceHeadlines");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Headline];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/headlines', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetRecurrenceIssues operation.
     * @callback module:api/L10Api~l10GetRecurrenceIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of issues for a Level 10 meeting
     * @param {Number} MEETING_ID Meeting Id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.INCLUDE_RESOLVED Issue Status whether solved or unresolve (Default: false)
     * @param {module:api/L10Api~l10GetRecurrenceIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    this.l10GetRecurrenceIssues = function(MEETING_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetRecurrenceIssues");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
        'INCLUDE_RESOLVED': opts['INCLUDE_RESOLVED'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Issue];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/issues', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetRecurrenceTodos operation.
     * @callback module:api/L10Api~l10GetRecurrenceTodosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Todo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of to-dos in a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.INCLUDE_CLOSED Todo Status whether closed or open (Default: false)
     * @param {module:api/L10Api~l10GetRecurrenceTodosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Todo>}
     */
    this.l10GetRecurrenceTodos = function(MEETING_ID, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetRecurrenceTodos");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
        'INCLUDE_CLOSED': opts['INCLUDE_CLOSED'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Todo];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/todos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserHeadlines operation.
     * @callback module:api/L10Api~l10GetUserHeadlinesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Headline>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of headlines in a Level 10 meeting for a particular user
     * @param {Number} USER_ID 
     * @param {Number} MEETING_ID 
     * @param {module:api/L10Api~l10GetUserHeadlinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Headline>}
     */
    this.l10GetUserHeadlines = function(USER_ID, MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserHeadlines");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetUserHeadlines");
      }


      var pathParams = {
        'USER_ID': USER_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Headline];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/users/{USER_ID}/headlines', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserIssues operation.
     * @callback module:api/L10Api~l10GetUserIssuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Issue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of issues in a Level 10 meeting for a particular user
     * @param {Number} USER_ID 
     * @param {Number} MEETING_ID 
     * @param {module:api/L10Api~l10GetUserIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Issue>}
     */
    this.l10GetUserIssues = function(USER_ID, MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserIssues");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetUserIssues");
      }


      var pathParams = {
        'USER_ID': USER_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Issue];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/users/{USER_ID}/issues', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserL10List operation.
     * @callback module:api/L10Api~l10GetUserL10ListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NameId>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of L10 meetings attended by a particular user
     * @param {Number} USER_ID User Id
     * @param {module:api/L10Api~l10GetUserL10ListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NameId>}
     */
    this.l10GetUserL10List = function(USER_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserL10List");
      }


      var pathParams = {
        'USER_ID': USER_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [NameId];

      return this.apiClient.callApi(
        '/api/v1/L10/{USER_ID}/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserMeasurables operation.
     * @callback module:api/L10Api~l10GetUserMeasurablesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Measurable>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of measurables in a Level 10 meeting for a particular user
     * @param {Number} USER_ID 
     * @param {Number} MEETING_ID 
     * @param {module:api/L10Api~l10GetUserMeasurablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Measurable>}
     */
    this.l10GetUserMeasurables = function(USER_ID, MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserMeasurables");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetUserMeasurables");
      }


      var pathParams = {
        'USER_ID': USER_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Measurable];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/users/{USER_ID}/measurables', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserRocks operation.
     * @callback module:api/L10Api~l10GetUserRocksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Rock>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of rocks in a Level 10 meeting for a particular user
     * @param {Number} USER_ID 
     * @param {Number} MEETING_ID 
     * @param {module:api/L10Api~l10GetUserRocksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Rock>}
     */
    this.l10GetUserRocks = function(USER_ID, MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserRocks");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetUserRocks");
      }


      var pathParams = {
        'USER_ID': USER_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Rock];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/users/{USER_ID}/rocks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10GetUserTodos operation.
     * @callback module:api/L10Api~l10GetUserTodosCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Todo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of todos in a Level 10 meeting for a particular user
     * @param {Number} USER_ID 
     * @param {Number} MEETING_ID 
     * @param {module:api/L10Api~l10GetUserTodosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Todo>}
     */
    this.l10GetUserTodos = function(USER_ID, MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'USER_ID' is set
      if (USER_ID === undefined || USER_ID === null) {
        throw new Error("Missing the required parameter 'USER_ID' when calling l10GetUserTodos");
      }

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10GetUserTodos");
      }


      var pathParams = {
        'USER_ID': USER_ID,
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = [Todo];

      return this.apiClient.callApi(
        '/api/v1/l10/{MEETING_ID}/users/{USER_ID}/todos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10RemoveHeadlineL10 operation.
     * @callback module:api/L10Api~l10RemoveHeadlineL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a headline from a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} HEADLINE_ID People headline ID
     * @param {module:api/L10Api~l10RemoveHeadlineL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10RemoveHeadlineL10 = function(MEETING_ID, HEADLINE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10RemoveHeadlineL10");
      }

      // verify the required parameter 'HEADLINE_ID' is set
      if (HEADLINE_ID === undefined || HEADLINE_ID === null) {
        throw new Error("Missing the required parameter 'HEADLINE_ID' when calling l10RemoveHeadlineL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'HEADLINE_ID': HEADLINE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/headlines/{HEADLINE_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10RemoveIssueL10 operation.
     * @callback module:api/L10Api~l10RemoveIssueL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an issue from a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} ISSUE_ID Issue ID
     * @param {module:api/L10Api~l10RemoveIssueL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10RemoveIssueL10 = function(MEETING_ID, ISSUE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10RemoveIssueL10");
      }

      // verify the required parameter 'ISSUE_ID' is set
      if (ISSUE_ID === undefined || ISSUE_ID === null) {
        throw new Error("Missing the required parameter 'ISSUE_ID' when calling l10RemoveIssueL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'ISSUE_ID': ISSUE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/issues/{ISSUE_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10RemoveL10 operation.
     * @callback module:api/L10Api~l10RemoveL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {module:api/L10Api~l10RemoveL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10RemoveL10 = function(MEETING_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10RemoveL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10RemoveMeasurableL10 operation.
     * @callback module:api/L10Api~l10RemoveMeasurableL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a scorecard measurable from a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} MEASURABLE_ID Scorecard measurable ID
     * @param {module:api/L10Api~l10RemoveMeasurableL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10RemoveMeasurableL10 = function(MEETING_ID, MEASURABLE_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10RemoveMeasurableL10");
      }

      // verify the required parameter 'MEASURABLE_ID' is set
      if (MEASURABLE_ID === undefined || MEASURABLE_ID === null) {
        throw new Error("Missing the required parameter 'MEASURABLE_ID' when calling l10RemoveMeasurableL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'MEASURABLE_ID': MEASURABLE_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/measurables/{MEASURABLE_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the l10RemoveRockL10 operation.
     * @callback module:api/L10Api~l10RemoveRockL10Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a rock from a Level 10 meeting
     * @param {Number} MEETING_ID Meeting ID
     * @param {Number} ROCK_ID Rock ID
     * @param {module:api/L10Api~l10RemoveRockL10Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.l10RemoveRockL10 = function(MEETING_ID, ROCK_ID, callback) {
      var postBody = null;

      // verify the required parameter 'MEETING_ID' is set
      if (MEETING_ID === undefined || MEETING_ID === null) {
        throw new Error("Missing the required parameter 'MEETING_ID' when calling l10RemoveRockL10");
      }

      // verify the required parameter 'ROCK_ID' is set
      if (ROCK_ID === undefined || ROCK_ID === null) {
        throw new Error("Missing the required parameter 'ROCK_ID' when calling l10RemoveRockL10");
      }


      var pathParams = {
        'MEETING_ID': MEETING_ID,
        'ROCK_ID': ROCK_ID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/L10/{MEETING_ID}/rocks/{ROCK_ID}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
